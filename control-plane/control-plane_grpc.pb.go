// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package control_plane

import (
	context "context"
	common "github.com/kulycloud/protocol/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ControlPlaneClient is the client API for ControlPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlPlaneClient interface {
	RegisterComponent(ctx context.Context, in *RegisterComponentRequest, opts ...grpc.CallOption) (ControlPlane_RegisterComponentClient, error)
	CreateEvent(ctx context.Context, in *common.Event, opts ...grpc.CallOption) (*common.Empty, error)
	ListenToEvent(ctx context.Context, in *ListenToEventRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type controlPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneClient(cc grpc.ClientConnInterface) ControlPlaneClient {
	return &controlPlaneClient{cc}
}

func (c *controlPlaneClient) RegisterComponent(ctx context.Context, in *RegisterComponentRequest, opts ...grpc.CallOption) (ControlPlane_RegisterComponentClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ControlPlane_serviceDesc.Streams[0], "/ControlPlane/RegisterComponent", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlPlaneRegisterComponentClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ControlPlane_RegisterComponentClient interface {
	Recv() (*common.Event, error)
	grpc.ClientStream
}

type controlPlaneRegisterComponentClient struct {
	grpc.ClientStream
}

func (x *controlPlaneRegisterComponentClient) Recv() (*common.Event, error) {
	m := new(common.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *controlPlaneClient) CreateEvent(ctx context.Context, in *common.Event, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ControlPlane/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlPlaneClient) ListenToEvent(ctx context.Context, in *ListenToEventRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ControlPlane/ListenToEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlPlaneServer is the server API for ControlPlane service.
// All implementations must embed UnimplementedControlPlaneServer
// for forward compatibility
type ControlPlaneServer interface {
	RegisterComponent(*RegisterComponentRequest, ControlPlane_RegisterComponentServer) error
	CreateEvent(context.Context, *common.Event) (*common.Empty, error)
	ListenToEvent(context.Context, *ListenToEventRequest) (*common.Empty, error)
	mustEmbedUnimplementedControlPlaneServer()
}

// UnimplementedControlPlaneServer must be embedded to have forward compatible implementations.
type UnimplementedControlPlaneServer struct {
}

func (UnimplementedControlPlaneServer) RegisterComponent(*RegisterComponentRequest, ControlPlane_RegisterComponentServer) error {
	return status.Errorf(codes.Unimplemented, "method RegisterComponent not implemented")
}
func (UnimplementedControlPlaneServer) CreateEvent(context.Context, *common.Event) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedControlPlaneServer) ListenToEvent(context.Context, *ListenToEventRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListenToEvent not implemented")
}
func (UnimplementedControlPlaneServer) mustEmbedUnimplementedControlPlaneServer() {}

// UnsafeControlPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServer will
// result in compilation errors.
type UnsafeControlPlaneServer interface {
	mustEmbedUnimplementedControlPlaneServer()
}

func RegisterControlPlaneServer(s grpc.ServiceRegistrar, srv ControlPlaneServer) {
	s.RegisterService(&_ControlPlane_serviceDesc, srv)
}

func _ControlPlane_RegisterComponent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RegisterComponentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ControlPlaneServer).RegisterComponent(m, &controlPlaneRegisterComponentServer{stream})
}

type ControlPlane_RegisterComponentServer interface {
	Send(*common.Event) error
	grpc.ServerStream
}

type controlPlaneRegisterComponentServer struct {
	grpc.ServerStream
}

func (x *controlPlaneRegisterComponentServer) Send(m *common.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _ControlPlane_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControlPlane/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServer).CreateEvent(ctx, req.(*common.Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlPlane_ListenToEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListenToEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlPlaneServer).ListenToEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ControlPlane/ListenToEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlPlaneServer).ListenToEvent(ctx, req.(*ListenToEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ControlPlane_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ControlPlane",
	HandlerType: (*ControlPlaneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _ControlPlane_CreateEvent_Handler,
		},
		{
			MethodName: "ListenToEvent",
			Handler:    _ControlPlane_ListenToEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RegisterComponent",
			Handler:       _ControlPlane_RegisterComponent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "control-plane.proto",
}
