// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package load_balancer

import (
	context "context"
	common "github.com/kulycloud/protocol/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LoadBalancerClient is the client API for LoadBalancer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoadBalancerClient interface {
	SetStorageEndpoints(ctx context.Context, in *common.EndpointList, opts ...grpc.CallOption) (*common.Empty, error)
	SetEndpoints(ctx context.Context, in *common.EndpointList, opts ...grpc.CallOption) (*common.Empty, error)
}

type loadBalancerClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadBalancerClient(cc grpc.ClientConnInterface) LoadBalancerClient {
	return &loadBalancerClient{cc}
}

func (c *loadBalancerClient) SetStorageEndpoints(ctx context.Context, in *common.EndpointList, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/LoadBalancer/SetStorageEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancerClient) SetEndpoints(ctx context.Context, in *common.EndpointList, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/LoadBalancer/SetEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancerServer is the server API for LoadBalancer service.
// All implementations must embed UnimplementedLoadBalancerServer
// for forward compatibility
type LoadBalancerServer interface {
	SetStorageEndpoints(context.Context, *common.EndpointList) (*common.Empty, error)
	SetEndpoints(context.Context, *common.EndpointList) (*common.Empty, error)
	mustEmbedUnimplementedLoadBalancerServer()
}

// UnimplementedLoadBalancerServer must be embedded to have forward compatible implementations.
type UnimplementedLoadBalancerServer struct {
}

func (UnimplementedLoadBalancerServer) SetStorageEndpoints(context.Context, *common.EndpointList) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStorageEndpoints not implemented")
}
func (UnimplementedLoadBalancerServer) SetEndpoints(context.Context, *common.EndpointList) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEndpoints not implemented")
}
func (UnimplementedLoadBalancerServer) mustEmbedUnimplementedLoadBalancerServer() {}

// UnsafeLoadBalancerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadBalancerServer will
// result in compilation errors.
type UnsafeLoadBalancerServer interface {
	mustEmbedUnimplementedLoadBalancerServer()
}

func RegisterLoadBalancerServer(s grpc.ServiceRegistrar, srv LoadBalancerServer) {
	s.RegisterService(&_LoadBalancer_serviceDesc, srv)
}

func _LoadBalancer_SetStorageEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EndpointList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).SetStorageEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LoadBalancer/SetStorageEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).SetStorageEndpoints(ctx, req.(*common.EndpointList))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancer_SetEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.EndpointList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancerServer).SetEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/LoadBalancer/SetEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancerServer).SetEndpoints(ctx, req.(*common.EndpointList))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoadBalancer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LoadBalancer",
	HandlerType: (*LoadBalancerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStorageEndpoints",
			Handler:    _LoadBalancer_SetStorageEndpoints_Handler,
		},
		{
			MethodName: "SetEndpoints",
			Handler:    _LoadBalancer_SetEndpoints_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "load-balancer.proto",
}
