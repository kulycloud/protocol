// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package storage

import (
	context "context"
	common "github.com/kulycloud/protocol/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	// Routes
	SetRoute(ctx context.Context, in *SetRouteRequest, opts ...grpc.CallOption) (*SetRouteResponse, error)
	GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error)
	GetRouteStep(ctx context.Context, in *GetRouteStepRequest, opts ...grpc.CallOption) (*GetRouteStepResponse, error)
	GetRouteStart(ctx context.Context, in *GetRouteStartRequest, opts ...grpc.CallOption) (*GetRouteStartResponse, error)
	GetRoutesInNamespace(ctx context.Context, in *GetRoutesInNamespaceRequest, opts ...grpc.CallOption) (*GetRoutesInNamespaceResponse, error)
	// Services
	SetService(ctx context.Context, in *SetServiceRequest, opts ...grpc.CallOption) (*common.Empty, error)
	GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error)
	GetServicesInNamespace(ctx context.Context, in *GetServicesInNamespaceRequest, opts ...grpc.CallOption) (*GetServicesInNamespaceResponse, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) SetRoute(ctx context.Context, in *SetRouteRequest, opts ...grpc.CallOption) (*SetRouteResponse, error) {
	out := new(SetRouteResponse)
	err := c.cc.Invoke(ctx, "/Storage/SetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...grpc.CallOption) (*GetRouteResponse, error) {
	out := new(GetRouteResponse)
	err := c.cc.Invoke(ctx, "/Storage/GetRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetRouteStep(ctx context.Context, in *GetRouteStepRequest, opts ...grpc.CallOption) (*GetRouteStepResponse, error) {
	out := new(GetRouteStepResponse)
	err := c.cc.Invoke(ctx, "/Storage/GetRouteStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetRouteStart(ctx context.Context, in *GetRouteStartRequest, opts ...grpc.CallOption) (*GetRouteStartResponse, error) {
	out := new(GetRouteStartResponse)
	err := c.cc.Invoke(ctx, "/Storage/GetRouteStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetRoutesInNamespace(ctx context.Context, in *GetRoutesInNamespaceRequest, opts ...grpc.CallOption) (*GetRoutesInNamespaceResponse, error) {
	out := new(GetRoutesInNamespaceResponse)
	err := c.cc.Invoke(ctx, "/Storage/GetRoutesInNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) SetService(ctx context.Context, in *SetServiceRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/Storage/SetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetService(ctx context.Context, in *GetServiceRequest, opts ...grpc.CallOption) (*GetServiceResponse, error) {
	out := new(GetServiceResponse)
	err := c.cc.Invoke(ctx, "/Storage/GetService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) GetServicesInNamespace(ctx context.Context, in *GetServicesInNamespaceRequest, opts ...grpc.CallOption) (*GetServicesInNamespaceResponse, error) {
	out := new(GetServicesInNamespaceResponse)
	err := c.cc.Invoke(ctx, "/Storage/GetServicesInNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	// Routes
	SetRoute(context.Context, *SetRouteRequest) (*SetRouteResponse, error)
	GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error)
	GetRouteStep(context.Context, *GetRouteStepRequest) (*GetRouteStepResponse, error)
	GetRouteStart(context.Context, *GetRouteStartRequest) (*GetRouteStartResponse, error)
	GetRoutesInNamespace(context.Context, *GetRoutesInNamespaceRequest) (*GetRoutesInNamespaceResponse, error)
	// Services
	SetService(context.Context, *SetServiceRequest) (*common.Empty, error)
	GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error)
	GetServicesInNamespace(context.Context, *GetServicesInNamespaceRequest) (*GetServicesInNamespaceResponse, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) SetRoute(context.Context, *SetRouteRequest) (*SetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRoute not implemented")
}
func (UnimplementedStorageServer) GetRoute(context.Context, *GetRouteRequest) (*GetRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedStorageServer) GetRouteStep(context.Context, *GetRouteStepRequest) (*GetRouteStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteStep not implemented")
}
func (UnimplementedStorageServer) GetRouteStart(context.Context, *GetRouteStartRequest) (*GetRouteStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouteStart not implemented")
}
func (UnimplementedStorageServer) GetRoutesInNamespace(context.Context, *GetRoutesInNamespaceRequest) (*GetRoutesInNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutesInNamespace not implemented")
}
func (UnimplementedStorageServer) SetService(context.Context, *SetServiceRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetService not implemented")
}
func (UnimplementedStorageServer) GetService(context.Context, *GetServiceRequest) (*GetServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetService not implemented")
}
func (UnimplementedStorageServer) GetServicesInNamespace(context.Context, *GetServicesInNamespaceRequest) (*GetServicesInNamespaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServicesInNamespace not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&_Storage_serviceDesc, srv)
}

func _Storage_SetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/SetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SetRoute(ctx, req.(*SetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/GetRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRoute(ctx, req.(*GetRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetRouteStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRouteStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/GetRouteStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRouteStep(ctx, req.(*GetRouteStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetRouteStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRouteStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/GetRouteStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRouteStart(ctx, req.(*GetRouteStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetRoutesInNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutesInNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetRoutesInNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/GetRoutesInNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetRoutesInNamespace(ctx, req.(*GetRoutesInNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_SetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).SetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/SetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).SetService(ctx, req.(*SetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/GetService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetService(ctx, req.(*GetServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_GetServicesInNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesInNamespaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).GetServicesInNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Storage/GetServicesInNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).GetServicesInNamespace(ctx, req.(*GetServicesInNamespaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Storage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetRoute",
			Handler:    _Storage_SetRoute_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _Storage_GetRoute_Handler,
		},
		{
			MethodName: "GetRouteStep",
			Handler:    _Storage_GetRouteStep_Handler,
		},
		{
			MethodName: "GetRouteStart",
			Handler:    _Storage_GetRouteStart_Handler,
		},
		{
			MethodName: "GetRoutesInNamespace",
			Handler:    _Storage_GetRoutesInNamespace_Handler,
		},
		{
			MethodName: "SetService",
			Handler:    _Storage_SetService_Handler,
		},
		{
			MethodName: "GetService",
			Handler:    _Storage_GetService_Handler,
		},
		{
			MethodName: "GetServicesInNamespace",
			Handler:    _Storage_GetServicesInNamespace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage.proto",
}
