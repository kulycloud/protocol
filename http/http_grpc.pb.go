// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package http

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HttpClient is the client API for Http service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HttpClient interface {
	ProcessRequest(ctx context.Context, opts ...grpc.CallOption) (Http_ProcessRequestClient, error)
}

type httpClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpClient(cc grpc.ClientConnInterface) HttpClient {
	return &httpClient{cc}
}

func (c *httpClient) ProcessRequest(ctx context.Context, opts ...grpc.CallOption) (Http_ProcessRequestClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Http_serviceDesc.Streams[0], "/Http/ProcessRequest", opts...)
	if err != nil {
		return nil, err
	}
	x := &httpProcessRequestClient{stream}
	return x, nil
}

type Http_ProcessRequestClient interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type httpProcessRequestClient struct {
	grpc.ClientStream
}

func (x *httpProcessRequestClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *httpProcessRequestClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HttpServer is the server API for Http service.
// All implementations must embed UnimplementedHttpServer
// for forward compatibility
type HttpServer interface {
	ProcessRequest(Http_ProcessRequestServer) error
	mustEmbedUnimplementedHttpServer()
}

// UnimplementedHttpServer must be embedded to have forward compatible implementations.
type UnimplementedHttpServer struct {
}

func (UnimplementedHttpServer) ProcessRequest(Http_ProcessRequestServer) error {
	return status.Errorf(codes.Unimplemented, "method ProcessRequest not implemented")
}
func (UnimplementedHttpServer) mustEmbedUnimplementedHttpServer() {}

// UnsafeHttpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HttpServer will
// result in compilation errors.
type UnsafeHttpServer interface {
	mustEmbedUnimplementedHttpServer()
}

func RegisterHttpServer(s grpc.ServiceRegistrar, srv HttpServer) {
	s.RegisterService(&_Http_serviceDesc, srv)
}

func _Http_ProcessRequest_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HttpServer).ProcessRequest(&httpProcessRequestServer{stream})
}

type Http_ProcessRequestServer interface {
	Send(*Chunk) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type httpProcessRequestServer struct {
	grpc.ServerStream
}

func (x *httpProcessRequestServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *httpProcessRequestServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Http_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Http",
	HandlerType: (*HttpServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProcessRequest",
			Handler:       _Http_ProcessRequest_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "http.proto",
}
