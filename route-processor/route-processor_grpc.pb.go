// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package route_processor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RouteProcessorClient is the client API for RouteProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RouteProcessorClient interface {
	ProcessRoute(ctx context.Context, in *RouteProcessorRequest, opts ...grpc.CallOption) (*RouteProcessorResponse, error)
}

type routeProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewRouteProcessorClient(cc grpc.ClientConnInterface) RouteProcessorClient {
	return &routeProcessorClient{cc}
}

func (c *routeProcessorClient) ProcessRoute(ctx context.Context, in *RouteProcessorRequest, opts ...grpc.CallOption) (*RouteProcessorResponse, error) {
	out := new(RouteProcessorResponse)
	err := c.cc.Invoke(ctx, "/RouteProcessor/ProcessRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RouteProcessorServer is the server API for RouteProcessor service.
// All implementations must embed UnimplementedRouteProcessorServer
// for forward compatibility
type RouteProcessorServer interface {
	ProcessRoute(context.Context, *RouteProcessorRequest) (*RouteProcessorResponse, error)
	mustEmbedUnimplementedRouteProcessorServer()
}

// UnimplementedRouteProcessorServer must be embedded to have forward compatible implementations.
type UnimplementedRouteProcessorServer struct {
}

func (UnimplementedRouteProcessorServer) ProcessRoute(context.Context, *RouteProcessorRequest) (*RouteProcessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRoute not implemented")
}
func (UnimplementedRouteProcessorServer) mustEmbedUnimplementedRouteProcessorServer() {}

// UnsafeRouteProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RouteProcessorServer will
// result in compilation errors.
type UnsafeRouteProcessorServer interface {
	mustEmbedUnimplementedRouteProcessorServer()
}

func RegisterRouteProcessorServer(s grpc.ServiceRegistrar, srv RouteProcessorServer) {
	s.RegisterService(&_RouteProcessor_serviceDesc, srv)
}

func _RouteProcessor_ProcessRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteProcessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RouteProcessorServer).ProcessRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RouteProcessor/ProcessRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RouteProcessorServer).ProcessRoute(ctx, req.(*RouteProcessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RouteProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "RouteProcessor",
	HandlerType: (*RouteProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessRoute",
			Handler:    _RouteProcessor_ProcessRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route-processor.proto",
}
