// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	common "github.com/kulycloud/protocol/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ServiceManagerClient is the client API for ServiceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceManagerClient interface {
	Reconcile(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*common.Empty, error)
}

type serviceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceManagerClient(cc grpc.ClientConnInterface) ServiceManagerClient {
	return &serviceManagerClient{cc}
}

func (c *serviceManagerClient) Reconcile(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/ServiceManager/Reconcile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceManagerServer is the server API for ServiceManager service.
// All implementations must embed UnimplementedServiceManagerServer
// for forward compatibility
type ServiceManagerServer interface {
	Reconcile(context.Context, *ReconcileRequest) (*common.Empty, error)
	mustEmbedUnimplementedServiceManagerServer()
}

// UnimplementedServiceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceManagerServer struct {
}

func (UnimplementedServiceManagerServer) Reconcile(context.Context, *ReconcileRequest) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconcile not implemented")
}
func (UnimplementedServiceManagerServer) mustEmbedUnimplementedServiceManagerServer() {}

// UnsafeServiceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceManagerServer will
// result in compilation errors.
type UnsafeServiceManagerServer interface {
	mustEmbedUnimplementedServiceManagerServer()
}

func RegisterServiceManagerServer(s grpc.ServiceRegistrar, srv ServiceManagerServer) {
	s.RegisterService(&_ServiceManager_serviceDesc, srv)
}

func _ServiceManager_Reconcile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).Reconcile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceManager/Reconcile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).Reconcile(ctx, req.(*ReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceManager",
	HandlerType: (*ServiceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reconcile",
			Handler:    _ServiceManager_Reconcile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
